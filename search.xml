<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数值分析实验作业（一）——三次样条插值</title>
      <link href="/2023/03/31/cubicspline/"/>
      <url>/2023/03/31/cubicspline/</url>
      
        <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>数值分析课的第一次实验作业。在此浅作记录。</p><h1 id="问题描述">问题描述</h1><p>编程实现三次样条插值方法。</p><h1 id="问题分析">问题分析</h1><p>按照《数值分析》课本第43~44页~~（懒得找了）~~建立样条插值函数的方法，先输入节点的数量和边界条件的种类，再依次输入各节点的值及其对应的函数值。根据这些条件确定<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>h</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">h_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9805em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>μ</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">\mu_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>λ</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">\lambda_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9805em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>d</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">d_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9805em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>的值，再运用矩阵求解得到各<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>M</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">M_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>的值，最后便可计算出各区间的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">S(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>的表达式。</p><p>在进行数据存储与矩阵运算时引入了Python中的numpy库并使用其相应功能，这样就不用手写矩阵运算了。</p><h1 id="完整代码">完整代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> math<br><span class="hljs-keyword">from</span> numpy.linalg <span class="hljs-keyword">import</span> (solve)<br><br>m = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;输入节点的数量: &quot;</span>))<br>n = m-<span class="hljs-number">1</span>                            <span class="hljs-comment">#使后续程序的下标与课本内保持一致</span><br>X = np.zeros((m))                <span class="hljs-comment">#节点值</span><br>Y = np.zeros((m))                <span class="hljs-comment">#对应的函数值</span><br>H = np.zeros((m-<span class="hljs-number">1</span>))<br>Mu = np.zeros((m))<br>Lambda = np.zeros((m))<br>D = np.zeros((m, <span class="hljs-number">1</span>))<br>A = np.zeros((m, m))<br>S = np.zeros((n, <span class="hljs-number">4</span>))            <span class="hljs-comment">#各区间对应表达式的k（k=0,1,2,3）次项的系数</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Deviation</span>(<span class="hljs-params">i, j</span>):                        <span class="hljs-comment">#计算f([x_i, x_j])的均差</span><br>    <span class="hljs-keyword">return</span> (Y[j]-Y[i])/(X[j]-X[i])<br><br><br>opt = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;输入边界条件种类(1~3): &quot;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>):<br>    x, y = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;输入节点x_%d的值及对应的函数值: &quot;</span> % i).split()<br>    X[i] = <span class="hljs-built_in">float</span>(x)<br>    Y[i] = <span class="hljs-built_in">float</span>(y)<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    H[j] = X[j+<span class="hljs-number">1</span>]-X[j]<br><br><span class="hljs-keyword">if</span> opt == <span class="hljs-string">&quot;1&quot;</span> <span class="hljs-keyword">or</span> opt == <span class="hljs-string">&quot;2&quot;</span>:<br>    diff_0, diff_n = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;输入两个边界点的&quot;</span>+opt+<span class="hljs-string">&quot;阶导的值: &quot;</span>).split()<br>    diff_0 = <span class="hljs-built_in">float</span>(diff_0)<br>    diff_n = <span class="hljs-built_in">float</span>(diff_n)<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n):<br>        Mu[j] = H[j-<span class="hljs-number">1</span>]/(H[j-<span class="hljs-number">1</span>]+H[j])<br>        Lambda[j] = <span class="hljs-number">1.0</span>-Mu[j]<br>        D[j] = <span class="hljs-number">6</span>*(Deviation(j, j+<span class="hljs-number">1</span>)-Deviation(j-<span class="hljs-number">1</span>, j))/(H[j-<span class="hljs-number">1</span>]+H[j])<br>    <span class="hljs-keyword">if</span> opt == <span class="hljs-string">&quot;1&quot;</span>:                            <span class="hljs-comment">#第一种边界条件，即已知两端的一阶导数值</span><br>        Lambda[<span class="hljs-number">0</span>] = Mu[n] = <span class="hljs-number">1</span><br>        D[<span class="hljs-number">0</span>] = <span class="hljs-number">6</span>*(Deviation(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)-diff_0)/H[<span class="hljs-number">0</span>]<br>        D[n] = <span class="hljs-number">6</span>*(diff_n-Deviation(n-<span class="hljs-number">1</span>, n))/H[n-<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">else</span>:                                    <span class="hljs-comment">#第二种边界条件，即已知两端的二阶导数值</span><br>        Lambda[<span class="hljs-number">0</span>] = Mu[n] = <span class="hljs-number">0</span><br>        D[<span class="hljs-number">0</span>] = <span class="hljs-number">2</span>*diff_0<br>        D[n] = <span class="hljs-number">2</span>*diff_n<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        A[j][j] = <span class="hljs-number">2</span><br>        A[j][j+<span class="hljs-number">1</span>] = Lambda[j]<br>        A[j+<span class="hljs-number">1</span>][j] = Mu[j+<span class="hljs-number">1</span>]<br>    A[n][n] = <span class="hljs-number">2</span><br>    M = solve(A, D)                            <span class="hljs-comment">#求解矩阵表达式AM = D的解</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        S[j][<span class="hljs-number">3</span>] = (M[j+<span class="hljs-number">1</span>]-M[j])/(<span class="hljs-number">6</span>*H[j])<br>        S[j][<span class="hljs-number">2</span>] = (M[j]*X[j+<span class="hljs-number">1</span>]-M[j+<span class="hljs-number">1</span>]*X[j])/(<span class="hljs-number">2</span>*H[j])<br>        S[j][<span class="hljs-number">1</span>] = (M[j+<span class="hljs-number">1</span>]*math.<span class="hljs-built_in">pow</span>(X[j], <span class="hljs-number">2</span>)-M[j]*math.<span class="hljs-built_in">pow</span>(X[j+<span class="hljs-number">1</span>], <span class="hljs-number">2</span>) +<br>                   <span class="hljs-number">2</span>*(Y[j+<span class="hljs-number">1</span>]-Y[j]))/(<span class="hljs-number">2</span>*H[j])+(M[j]-M[j+<span class="hljs-number">1</span>])*H[j]/<span class="hljs-number">6</span><br>        S[j][<span class="hljs-number">0</span>] = (M[j]*math.<span class="hljs-built_in">pow</span>(X[j+<span class="hljs-number">1</span>], <span class="hljs-number">3</span>)-M[j+<span class="hljs-number">1</span>]*math.<span class="hljs-built_in">pow</span>(X[j], <span class="hljs-number">3</span>)+<span class="hljs-number">6</span> *<br>                   (Y[j]*X[j+<span class="hljs-number">1</span>]-Y[j+<span class="hljs-number">1</span>]*X[j]))/(<span class="hljs-number">6</span>*H[j])+(M[j+<span class="hljs-number">1</span>]*X[j]-M[j]*X[j+<span class="hljs-number">1</span>])*H[j]/<span class="hljs-number">6</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;S(x)&quot;</span>)<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;= (%f*x^3) + (%f*x^2) + (%f*x) + (%f), %f &lt;= x &lt;= %f&quot;</span> %<br>              (S[j][<span class="hljs-number">3</span>], S[j][<span class="hljs-number">2</span>], S[j][<span class="hljs-number">1</span>], S[j][<span class="hljs-number">0</span>], X[j], X[j+<span class="hljs-number">1</span>]))<br><br><span class="hljs-keyword">elif</span> opt == <span class="hljs-string">&quot;3&quot;</span>:                            <span class="hljs-comment">#第三种边界条件，即已知该函数为周期函数</span><br>    D_temp = np.zeros((m-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>))                <span class="hljs-comment">#用于矩阵求解</span><br>    A_temp = np.zeros((m-<span class="hljs-number">1</span>, m-<span class="hljs-number">1</span>))            <span class="hljs-comment">#用于矩阵求解</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n):<br>        Mu[j] = H[j-<span class="hljs-number">1</span>]/(H[j-<span class="hljs-number">1</span>]+H[j])<br>        Lambda[j] = <span class="hljs-number">1.0</span>-Mu[j]<br>        D[j] = <span class="hljs-number">6</span>*(Deviation(j, j+<span class="hljs-number">1</span>)-Deviation(j-<span class="hljs-number">1</span>, j))/(H[j-<span class="hljs-number">1</span>]+H[j])<br>    Lambda[n] = H[<span class="hljs-number">0</span>]/(H[n-<span class="hljs-number">1</span>]+H[<span class="hljs-number">0</span>])<br>    Mu[n] = <span class="hljs-number">1.0</span>-Lambda[n]<br>    D[n] = <span class="hljs-number">6</span>*(Deviation(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)-Deviation(n-<span class="hljs-number">1</span>, n))/(H[n-<span class="hljs-number">1</span>]+H[<span class="hljs-number">0</span>])<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        D_temp[j] = D[j+<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n-<span class="hljs-number">1</span>):<br>        A_temp[j][j] = <span class="hljs-number">2</span><br>        A_temp[j][j+<span class="hljs-number">1</span>] = Lambda[j+<span class="hljs-number">1</span>]<br>        A_temp[j+<span class="hljs-number">1</span>][j] = Mu[j+<span class="hljs-number">2</span>]<br>    A_temp[n-<span class="hljs-number">1</span>][n-<span class="hljs-number">1</span>] = <span class="hljs-number">2</span><br>    A_temp[<span class="hljs-number">0</span>][n-<span class="hljs-number">1</span>] = Mu[<span class="hljs-number">1</span>]<br>    A_temp[n-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = Lambda[n]<br>    M_temp = solve(A_temp, D_temp)<br>    M = np.zeros((m, <span class="hljs-number">1</span>))<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        M[j+<span class="hljs-number">1</span>] = M_temp[j]                    <span class="hljs-comment">#保持下标与课本内一致</span><br>    M[<span class="hljs-number">0</span>] = M[n]<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        S[j][<span class="hljs-number">3</span>] = (M[j+<span class="hljs-number">1</span>]-M[j])/(<span class="hljs-number">6</span>*H[j])<br>        S[j][<span class="hljs-number">2</span>] = (M[j]*X[j+<span class="hljs-number">1</span>]-M[j+<span class="hljs-number">1</span>]*X[j])/(<span class="hljs-number">2</span>*H[j])<br>        S[j][<span class="hljs-number">1</span>] = (M[j+<span class="hljs-number">1</span>]*math.<span class="hljs-built_in">pow</span>(X[j], <span class="hljs-number">2</span>)-M[j]*math.<span class="hljs-built_in">pow</span>(X[j+<span class="hljs-number">1</span>], <span class="hljs-number">2</span>) +<br>                   <span class="hljs-number">2</span>*(Y[j+<span class="hljs-number">1</span>]-Y[j]))/(<span class="hljs-number">2</span>*H[j])+(M[j]-M[j+<span class="hljs-number">1</span>])*H[j]/<span class="hljs-number">6</span><br>        S[j][<span class="hljs-number">0</span>] = (M[j]*math.<span class="hljs-built_in">pow</span>(X[j+<span class="hljs-number">1</span>], <span class="hljs-number">3</span>)-M[j+<span class="hljs-number">1</span>]*math.<span class="hljs-built_in">pow</span>(X[j], <span class="hljs-number">3</span>)+<span class="hljs-number">6</span> *<br>                   (Y[j]*X[j+<span class="hljs-number">1</span>]-Y[j+<span class="hljs-number">1</span>]*X[j]))/(<span class="hljs-number">6</span>*H[j])+(M[j+<span class="hljs-number">1</span>]*X[j]-M[j]*X[j+<span class="hljs-number">1</span>])*H[j]/<span class="hljs-number">6</span><br>    difference = <span class="hljs-built_in">float</span>(X[n]-X[<span class="hljs-number">0</span>])            <span class="hljs-comment">#该函数的周期</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;S(x)&quot;</span>)<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;= (%f*x^3) + (%f*x^2) + (%f*x) + (%f), %f+k*%f &lt;= x &lt;= %f+k*%f, k为整数&quot;</span> %<br>              (S[j][<span class="hljs-number">3</span>], S[j][<span class="hljs-number">2</span>], S[j][<span class="hljs-number">1</span>], S[j][<span class="hljs-number">0</span>], X[j], difference, X[j+<span class="hljs-number">1</span>], difference))<br><br></code></pre></td></tr></table></figure><h1 id="后记">后记</h1><p>毕竟已经有现成的公式可以直接抄了，所以写起来思路还是比较清晰的。就是变量太多，写着写着自己还搞混过几次，怎么会事呢.jpg</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>算法课实验作业（二）——石材切割问题</title>
      <link href="/2023/03/30/stonecut/"/>
      <url>/2023/03/30/stonecut/</url>
      
        <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>算法课的第二次实验作业。在此浅作记录。</p><h1 id="问题描述">问题描述</h1><p><img src="https://s2.loli.net/2023/03/30/o12wOUQdHgSqDEz.png" alt="stone.png"></p><p>PPT上的原题如图所示，老师在课上对该题的部分条件进行了解释与修改，并且要求用递归完成此题。最终题目如下：</p><blockquote><p>石材切割问题：给定一块高度无限，宽度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>W</mi></mrow><annotation encoding="application/x-tex">W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span></span>的石板。现需要从板上分别切割出<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>个高度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>l</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">l_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0197em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，宽度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>w</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">w_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的石砖。切割规则是石砖长度方向与石板的长度方向保持一致，同时满足一刀切的要求，每种石砖只切出一个。问如何切割使所使用的石材利用率较高？</p></blockquote><p>这里规定输入格式：第一行一个数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>表示石砖数量；第二行一个数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>W</mi></mrow><annotation encoding="application/x-tex">W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span></span>表示石板宽度；接下来<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>行，每行输入3个数，分别代表石砖的编号、石砖的宽与石砖的高。</p><h1 id="问题分析">问题分析</h1><p>使用一个包含石砖的编号、宽度、高度及是否已切过的判断值的结构体数组存储各个石砖的信息。在开始切割前，先对该数组按高度进行快速排序，以便每次都能取到高度最大的石砖。每次从石板直接切割时取高度最大的石砖，再对切出剩余的部分进行递归，每次按先竖切再横切的规则进行，直到余下的部分已切不出任何一个石砖。按这样进行切割，直到所有石砖均已切出为止。同时记录下每块石板切出石砖的编号与已使用石板的高度，最后将石板总面积与已使用石砖的面积（高乘宽）相除，即可得到利用率。</p><p>由于每次都取高度最大的石砖进行切割，故利用率可相对达到较大的值。</p><h1 id="完整代码">完整代码</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX 131072                <span class="hljs-comment">//存储石砖信息数量的最大值，同时代替Inf的使用</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">StoneInfo</span> &#123;</span><br>    <span class="hljs-type">int</span> id;<span class="hljs-comment">//石砖的id</span><br>    <span class="hljs-type">int</span> w;<span class="hljs-comment">//石砖的宽</span><br>    <span class="hljs-type">int</span> h;<span class="hljs-comment">//石砖的高</span><br>    <span class="hljs-type">int</span> is_used;<span class="hljs-comment">//该石砖是否已经切出</span><br>&#125;StoneInfo;<br>StoneInfo S[MAX];<br><span class="hljs-type">int</span> used_area = <span class="hljs-number">0</span>, top = <span class="hljs-number">0</span>, used_h = <span class="hljs-number">0</span>;    <span class="hljs-comment">//已经切出的石砖总面积，未切过的第一块石砖位置，已使用的高度</span><br><span class="hljs-type">int</span> n, num = <span class="hljs-number">0</span>;                            <span class="hljs-comment">//石砖总数，目前切出的石板个数</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">HeightCompare</span><span class="hljs-params">(StoneInfo* a, StoneInfo* b)</span>    <span class="hljs-comment">//比较石砖高度时调用的函数</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (b-&gt;h - a-&gt;h)<span class="hljs-keyword">return</span> b-&gt;h - a-&gt;h;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> b-&gt;w - a-&gt;w;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">StoneCut</span><span class="hljs-params">(<span class="hljs-type">int</span> w, <span class="hljs-type">int</span> h)</span>        <span class="hljs-comment">//石板切割函数</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (h == <span class="hljs-number">0</span> || w == <span class="hljs-number">0</span>)<span class="hljs-keyword">return</span>;<span class="hljs-comment">//待切石板的宽或高为0时退出函数</span><br>    <span class="hljs-type">int</span> i = top;<br>    <span class="hljs-keyword">if</span> (h == MAX)<span class="hljs-comment">//开辟新一块石板进行切割</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;从第%d块石板中切下的石砖id：%d &quot;</span>, ++num, S[i].id);<br>        S[i].is_used++;<span class="hljs-comment">//该石砖已切出</span><br>        used_h += S[i].h;<span class="hljs-comment">//开辟相同高度的石板</span><br>        used_area += S[i].w * S[i].h;<span class="hljs-comment">//切出面积增加</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, S[i].id);<span class="hljs-comment">//输出该切出石砖的id</span><br>        StoneCut(w - S[i].w, S[i].h);<span class="hljs-comment">//对剩余部分进行递归</span><br>        <span class="hljs-keyword">while</span> (S[top].is_used)top++;<span class="hljs-comment">//使top指向未切过的第一块石砖的位置</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">while</span> ((S[i].h &gt; h || S[i].w &gt; w || S[i].is_used) &amp;&amp; i &lt; n)i++;<span class="hljs-comment">//找到可切且未切过的石砖</span><br>    <span class="hljs-keyword">if</span> (i &lt; n)<br>    &#123;<br>        S[i].is_used++;<br>        used_area += S[i].w * S[i].h;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, S[i].id);<br>        StoneCut(w - S[i].w, h);<br>        StoneCut(S[i].w, h - S[i].h);<br>        <span class="hljs-keyword">while</span> (S[top].is_used)top++;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> W, i;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;W);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;S[i].id, &amp;S[i].w, &amp;S[i].h);<span class="hljs-comment">//石砖数据</span><br>        S[i].is_used = <span class="hljs-number">0</span>;<span class="hljs-comment">//参数初始化</span><br>    &#125;<br>    qsort(S, n, <span class="hljs-keyword">sizeof</span>(StoneInfo), HeightCompare);<span class="hljs-comment">//按高度进行快速排序</span><br>    <span class="hljs-keyword">while</span> (top &lt; n)<span class="hljs-comment">//还有石砖未切出</span><br>        StoneCut(W, MAX);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;已使用的石板总高度为：%d\n所有切出的石砖总面积为：%d\n&quot;</span>, used_h, used_area);<br>    <span class="hljs-type">double</span> Used_Area = used_area, Total_Area = W * used_h;<span class="hljs-comment">//转化为浮点数以进行利用率的运算</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;计算得利用率为：%lf%%&quot;</span>, Used_Area / Total_Area * <span class="hljs-number">100</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="后记">后记</h1><p>在每次切割时的石砖选择上使用了贪心算法，每次都取满足条件且高度最大的石砖进行切割。这样切割所得出的利用率不一定是最高的，但可以保证在较小的时间复杂度内计算出一个较优解。当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>较小时，可以采用回溯的算法求出最优解，这里不再细述。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>算法课实验作业（一）——随机点名程序</title>
      <link href="/2023/03/22/calltheroll/"/>
      <url>/2023/03/22/calltheroll/</url>
      
        <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>算法课的第一次实验作业。在此浅作记录。</p><h1 id="问题描述">问题描述</h1><p>随机点名程序（越不来上课的人，被点中的概率越高；实现抽查问题、预警等功能）。</p><h1 id="问题分析">问题分析</h1><p>使用<code>info.txt</code>文件存放各学生旷课次数的信息，在程序运行时使用一个包含学生姓名、旷课次数和当堂课的出勤情况的结构体数组记录并更新相关信息。</p><p>随机抽取功能的实现则是使用<code>checklist</code>数组和<code>rand</code>函数：在初始化时对每个学生的序号记录进<code>checklist</code>数组中，其记录次数为2^（该学生的旷课次数），再用<code>rand</code>函数便能实现”越不来上课的人，被点中的概率越高“的功能。当某学生的旷课次数超过最大次数时，则取消其考试资格，且初始化<code>checklist</code>数组时不会将其序号计入。</p><p>点名及提问时用<code>attendance</code>（初始值均为0）记录该学生出勤情况（1表示出勤，-1表示旷课），使点名函数在随机抽到已抽过的学生时将再次抽取，提问函数在抽到已经确认出勤的学生时会直接提问。预警功能则是在学生未出勤时进行预警。</p><p>该程序还加入了查询函数，可列出各学生的旷课次数。</p><h1 id="完整代码">完整代码</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 210            <span class="hljs-comment">//最大容量</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_ABSENT_TIME 5        <span class="hljs-comment">//最大缺勤次数</span></span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu_info</span> &#123;</span><br>    <span class="hljs-type">char</span> name[<span class="hljs-number">10</span>];<span class="hljs-comment">//姓名</span><br>    <span class="hljs-type">int</span> abs_time;<span class="hljs-comment">//已缺勤次数</span><br>    <span class="hljs-type">int</span> attendance;<span class="hljs-comment">//当堂课的出勤情况</span><br>&#125;stud[MAXSIZE];<br><span class="hljs-type">int</span> stu_num = <span class="hljs-number">0</span>;            <span class="hljs-comment">//学生总数</span><br><span class="hljs-type">int</span> checklist[<span class="hljs-number">20</span> * MAXSIZE] = &#123; <span class="hljs-number">0</span> &#125;;    <span class="hljs-comment">//抽取的数组，其中checklist[0]用作总数量</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">load</span><span class="hljs-params">()</span><br>&#123;<br>    FILE* fp;<br>    <span class="hljs-keyword">if</span> ((fp = fopen(<span class="hljs-string">&quot;info.txt&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>)) == <span class="hljs-literal">NULL</span>)<span class="hljs-comment">//打开文件</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;无法打开文件！\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (!feof(fp))<br>    &#123;<br>        <span class="hljs-built_in">fscanf</span>(fp, <span class="hljs-string">&quot;%s&quot;</span>, stud[++stu_num].name);<span class="hljs-comment">//读取姓名</span><br>        <span class="hljs-built_in">fscanf</span>(fp, <span class="hljs-string">&quot;%d\n&quot;</span>, &amp;stud[stu_num].abs_time);<span class="hljs-comment">//读取缺勤次数</span><br>        stud[stu_num].attendance = <span class="hljs-number">0</span>;<span class="hljs-comment">//每堂课前出勤情况初始化为0</span><br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;数据读取成功！共有%d名学生。\n&quot;</span>, stu_num);<br>    fclose(fp);<span class="hljs-comment">//关闭文件</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> i;<br>    FILE* fp;<br>    <span class="hljs-keyword">if</span> ((fp = fopen(<span class="hljs-string">&quot;info.txt&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>)) == <span class="hljs-literal">NULL</span>)<span class="hljs-comment">//打开文件</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;无法打开文件！\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= stu_num; i++)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;%s\n%d\n&quot;</span>, stud[i].name, stud[i].abs_time);<br>        <span class="hljs-comment">//将当前数据存入文件</span><br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;数据保存成功！即将退出......\n&quot;</span>);<br>    fclose(fp);<span class="hljs-comment">//关闭文件</span><br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">initchecklist</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> i, j;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= stu_num; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (stud[i].abs_time != MAX_ABSENT_TIME)<span class="hljs-comment">//未达到最大旷课次数时加入数组</span><br>            <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>, stud[i].abs_time); j++)<span class="hljs-comment">//加入次数为2^（该学生的旷课次数）次</span><br>                checklist[++checklist[<span class="hljs-number">0</span>]] = i;<br>    &#125;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">alert</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span><br>&#123;<br>    stud[id].abs_time++;<br>    <span class="hljs-keyword">if</span> (stud[id].abs_time == MAX_ABSENT_TIME)<span class="hljs-comment">//达到最大旷课次数</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s同学已旷课%d次，达到最大旷课次数，取消考试资格！\n&quot;</span>, stud[id].name, stud[id].abs_time);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s同学已旷课%d次，请注意！\n&quot;</span>, stud[id].name, stud[id].abs_time);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">check_att</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span><br>&#123;<br>    <span class="hljs-type">int</span> att;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s同学是否出勤？\n&quot;</span>, stud[checklist[k]].name);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;att);<span class="hljs-comment">//是否出勤的参数，0表示旷课，其余为出勤</span><br>    <span class="hljs-keyword">if</span> (att)<br>        stud[checklist[k]].attendance = <span class="hljs-number">1</span>;<span class="hljs-comment">//出勤</span><br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        stud[checklist[k]].attendance = <span class="hljs-number">-1</span>;<span class="hljs-comment">//旷课</span><br>        alert(checklist[k]);<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">CheckName</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span><br>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, k;<br>    <span class="hljs-keyword">while</span> (i &lt;= num)<br>    &#123;<br>        k = rand() % checklist[<span class="hljs-number">0</span>] + <span class="hljs-number">1</span>;<span class="hljs-comment">//生成随机数</span><br>        <span class="hljs-keyword">if</span> (!stud[checklist[k]].attendance)<span class="hljs-comment">//未点名过</span><br>        &#123;<br>            check_att(k);<br>            i++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">AnswerQuestion</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span><br>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, k, ans;<br>    <span class="hljs-keyword">while</span> (i &lt;= num)<br>    &#123;<br>        k = rand() % checklist[<span class="hljs-number">0</span>] + <span class="hljs-number">1</span>;<span class="hljs-comment">//生成随机数</span><br>        <span class="hljs-keyword">if</span> (!stud[checklist[k]].attendance)<span class="hljs-comment">//未点名过</span><br>            check_att(k);<br>        <span class="hljs-keyword">if</span> (stud[checklist[k]].attendance == <span class="hljs-number">1</span>)<span class="hljs-comment">//该学生出勤则回答问题</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s同学，请回答：&quot;</span>, stud[checklist[k]].name);<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;ans);<span class="hljs-comment">//问题正确与否的参数，0表示错误，其余为正确</span><br>            <span class="hljs-keyword">if</span> (ans)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;回答正确！\n&quot;</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;回答错误！\n&quot;</span>);<br>            i++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">find</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; stu_num; i++)<span class="hljs-comment">//遍历</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s同学已旷课%d次。\n&quot;</span>, stud[i].name, stud[i].abs_time);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    srand((<span class="hljs-type">unsigned</span>)time(<span class="hljs-number">0</span>));<span class="hljs-comment">//以当前时间初始化种子，保证每次运行的随机数次序不同</span><br>    <span class="hljs-type">int</span> i, opt, n;<br>    <span class="hljs-keyword">if</span> (!load())<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//读取文件，文件不存在时退出程序</span><br>    initchecklist();<span class="hljs-comment">//初始化checklist数组</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入“1”以点名，输入“2”以抽查问题，输入“3”以查询旷课次数，输入“0”以保存并退出程序。\n&quot;</span>);<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入您要进行的操作：&quot;</span>);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;opt);<br>        <span class="hljs-keyword">if</span> (!opt)<br>        &#123;<br>            save();<span class="hljs-comment">//保存文件</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//退出</span><br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (opt == <span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入点名人数：&quot;</span>);<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>            CheckName(n);<span class="hljs-comment">//点名</span><br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (opt == <span class="hljs-number">2</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入提问人数：&quot;</span>);<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>            AnswerQuestion(n);<span class="hljs-comment">//提问</span><br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (opt == <span class="hljs-number">3</span>)<br>        &#123;<br>            find();<span class="hljs-comment">//查询各学生的旷课次数</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="后记">后记</h1><p>用到的基本上都是早已学过且用过多次的方法，写起来也没什么难度。与其说这是一个算法题目，不如说这就是一个超小型的项目。不过大项目也正是靠这些看起来很小的部分结合而成的，而且这也已经可以拿来在现实生活中运用了。</p><p><s>所以老师应该不会从大家的作业中拿一份出来用吧不会吧不会吧.jpg</s></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HibikiZer0的第一篇博文</title>
      <link href="/2021/06/25/firstblog/"/>
      <url>/2021/06/25/firstblog/</url>
      
        <content type="html"><![CDATA[<p>总算把博客搭起来了。</p><p>就差不多先这样吧。</p><p>对于我这种没啥技术力可言的人来说，搭博客的目的主要就是记录自己的胡言乱语吧。</p><p>博客还在建设中，以后还请多指教。</p>]]></content>
      
      
      <categories>
          
          <category> 随想 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
