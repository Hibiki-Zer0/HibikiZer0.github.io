<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>对C语言中四舍五入问题的分析与探讨</title>
      <link href="/2021/10/06/cround/"/>
      <url>/2021/10/06/cround/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前两周，笔者正在学习C语言时，舍友（以下简称L）给我看了这样的一道题：<br><img src="https://i.loli.net/2021/10/06/Em9sqQU6ewZ827R.png" alt="cround_1.png"><br>当时笔者寻思着：这不就是一道普通的四舍五入题吗？<br>而当L把他的代码和OJ的结果给笔者看时，笔者才发现事情并不简单。<br><img src="https://i.loli.net/2021/10/06/VYgcyKLjOIhfkvA.jpg" alt="cround_2.jpg"><br>由于笔者才疏学浅，无法看出这段程序的问题所在，便去向一位以前参加过信息竞赛的同学qweryy（以下简称Q）请教。与Q一番探讨后，笔者学到许多，便在此记录，以便日后翻看。</p><p><font size=5><strong>注意：本文内容与结论为笔者经探讨后主观得出，并不能保证其准确性。如有错误或疏漏之处，欢迎指正。</strong></font><br><del>（其实主要还是因为我菜）</del></p><p>（以下为源代码，供复制。）</p><p>L的源代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> a;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2f0000&quot;</span>,a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>笔者的源代码（虽然AC了但是非常繁琐）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> a=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;a);</span><br><span class="line">    a=a*<span class="number">100</span>+<span class="number">0.5</span>;</span><br><span class="line">    <span class="keyword">int</span> b=a;</span><br><span class="line">    a=b;</span><br><span class="line">    a/=<span class="number">100</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%f&quot;</span>,a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="（一）"><a href="#（一）" class="headerlink" title="（一）"></a>（一）</h1><p>Q首先指出：<code>%.2f0000</code>应该改为<code>%.2lf0000</code>。</p><blockquote><p>使用<code>%f</code>会转成<code>float</code>，可能会有精度损失；<code>%lf</code>才是double的格式符。<br>  例如数据<code>123456486.9644444</code>，随便搞个有效数位大一点的就行。<br>  因为<code>float</code>的有效数位只有24位（在二进制下）。<br>  不过本来使用不匹配的格式符输出就是一件危险的事。</p></blockquote><h1 id="（二）"><a href="#（二）" class="headerlink" title="（二）"></a>（二）</h1><p>按照Q的说法，L回去对代码进行了修改，但是OJ仍未通过。。<br><img src="https://i.loli.net/2021/10/06/r8HENZkinvueR54.jpg" alt="cround_3.jpg"><br>笔者把第3项的测试数据下载运行了一次，却发现输出的结果是正确的。<br>（输入数据为<code>0.125</code>；输出数据为<code>0.130000</code>）<br><img src="https://i.loli.net/2021/10/06/zCbfqeAwsMyNYxu.jpg" alt="cround_4.JPG"><br>而Q在Linux系统下测试输出的结果却是<code>0.120000</code>。<br><img src="https://i.loli.net/2021/10/06/R9igcpvBDZ8EHbS.png" alt="cround_5.png"><br>众人一时陷入困境。</p><h1 id="（三）"><a href="#（三）" class="headerlink" title="（三）"></a>（三）</h1><p>数分钟后，Q在<a href="https://www.exploringbinary.com/inconsistent-rounding-of-printed-floating-point-numbers/">Rick Regan的文章</a>中发现了原因。</p><blockquote><p>是这样的，首先像0.25和0.125都是2的次幂，在double内存储没有误差。<br>  然后其他的浮点数可能存在精度误差，要看实际存的是什么数再用四舍六入五成双<br>  <img src="https://i.loli.net/2021/10/06/Y8H6KTtkcrVWJC1.png" alt="cround_6.jpg"><br>  g++/gcc的<code>%.2f</code>的规则不是四舍五入，是四舍六入五成双。<br>  如果用visual c++编译器就是四舍五入。</p></blockquote><blockquote><p>总结一下，对于<code>printf</code>的保留小数功能，可以简单理解为：<br>  1.在二进制下是有限小数：四舍六入五成双。<br>  2.在二进制下是循环小数：存在精度误差，不太方便知道.xy5的情况是否被进位。</p></blockquote><h1 id="（四）"><a href="#（四）" class="headerlink" title="（四）"></a>（四）</h1><p>那么对于这道题，怎样写才是较优解呢？</p><p><del>Q：就用你的方法呀，很标准。<br>笔者：？</del></p><blockquote><p>+0.5是可以存在变量里的。<br>  不过写法可以简化：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> f;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lf\n&quot;</span>, (<span class="keyword">int</span>)(f * <span class="number">100</span> + <span class="number">0.5</span>) / <span class="number">100.0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>1.使用匹配的格式符输出；<br>2.<code>printf</code>的保留小数功能不是简单的四舍五入，而要根据原数据在二进制下是有限小数还是循环小数分不同情况讨论；<br>3.对于四舍五入的问题，较优的方法为先乘上10的x次幂至要保留的位数，然后+0.5，最后再除以10的x次幂即可。</p><h1 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h1><p>其实早在数年前，笔者就曾去了解过C程序设计的相关知识，也因此才能够写出上文的代码。<del>（其实就是吃老本）</del><br>但当时因为没有足够的决心和毅力，学到分支和循环结构时就放弃了，以至于现在还是连半桶水都算不上的水平。<br>但是现在既然开始系统地学习了，就不能再继续保持着之前吊儿郎当的态度了。<br>保持住求知欲，下定决心去学好一件事，方能学有所成，对吧？<br>与诸君共勉。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>对连接过程中留下的的字符串的分析与解密</title>
      <link href="/2021/06/26/secretcode/"/>
      <url>/2021/06/26/secretcode/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>昨天，笔者在QQ空间上尝试连接到一个不稳定的精神空间<del>（这个博客）</del>，但由于连接线路受到干扰而中断。最后留下了这样一段字符串：</p><pre><code>NBzHIaDTHIXSbzDJMJUWWzLzMVZDALTHNFzGQsLCFZUWbLY=</code></pre><p>接下来，笔者将简单说明一下自己对这段字符串的解密过程。</p><p><del>（所以自导自演有意思吗喂）</del></p><h1 id="初步观察"><a href="#初步观察" class="headerlink" title="初步观察"></a>初步观察</h1><p>根据这段字符串末尾的“=”与其中的大写、小写字母<del>（并结合笔者的阅历）</del>，初步猜想这可能是经过了base64加密。</p><p>于是笔者使用<a href="https://www.qqxiuzi.cn/bianma/base64.htm">在线工具</a>对其进行base64解密，结果如下：</p><pre><code>4ǡӜү0ɰ[21VCǴ\Ƃl</code></pre><p><del>（这什么玩意）</del></p><p>很显然，直接对这段字符串进行base64解密的方法肯定是错误的。</p><h1 id="深入思考"><a href="#深入思考" class="headerlink" title="深入思考"></a>深入思考</h1><p>再进一步观察，可以发现这段字符串中<strong>没有任何一个数字字符</strong>。</p><p>如此长的一段字符串中，没有任何一个数字一定是小概率事件。因为无论是根据base64，还是base32甚至是base16的索引表来看，数字字符都占了一定的分量。</p><p>再仔细研究这段字符串，发现其中的小写字母不太对劲：这段字符串中的小写字母只有z、a、b和s。而根据这些字母的小写/大写的形状，貌似都可以近似转化为数字。</p><p>所以笔者考虑对字符串中的小写字母转换成数字。</p><h1 id="转换与解密（1）"><a href="#转换与解密（1）" class="headerlink" title="转换与解密（1）"></a>转换与解密（1）</h1><p>将字符串中的z改为2，a（A）改为4，b改为6，s改为5，得到如下字符串：</p><pre><code>NB2HI4DTHIXS62DJMJUWW2L2MVZDALTHNF2GQ5LCFZUW6LY=</code></pre><p>base64解密如下：</p><pre><code>4#Ӝҫ`ɰ[b1VCǴ]C趀</code></pre><p><del>（梅开二度）</del></p><p>看来还是不太对劲。</p><h1 id="转换与解密（2）"><a href="#转换与解密（2）" class="headerlink" title="转换与解密（2）"></a>转换与解密（2）</h1><p>没有小写字母，说明这是base64加密的可能性很低；而其中的数字只出现了2、4、5、6，都在2-7之间。所以考虑用base32解密。</p><p>解密结果如下：</p><pre><code>https://hibikizer0.github.io/</code></pre><p>访问这个网址，便再次成功地连接到了这个不稳定的精神空间<del>（成功发现并访问了这个博客）</del>。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>对这段字符串的解密方法为：</p><ol><li>根据字母与数字形状的相似性，将字符串中的小写字母改为数字；</li><li>使用base32解密便可得到结果。</li></ol><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>在初次连接中还留下了那个不稳定的精神空间的截图。而且由于其博主名与其网址中采用的昵称是一致的，再根据Hexo的Butterfly主题，专业人士甚至可以直接猜出来解密后的网址，而不需要任何解密过程。</p><p><del>（或者甚至直接在github里搜一搜都能找得到）</del></p><p><del>（所以自导自演有意思吗喂）</del></p><h1 id="真·后记"><a href="#真·后记" class="headerlink" title="真·后记"></a>真·后记</h1><p>笔者曾提到过：这个博客主要是用来记录自己的胡言乱语。相对于QQ空间里的说说而言，这里更可能会记录一些笔者内心深处的<del>不稳定的</del>思想。所以便没有直接将这个博客的地址贴在空间里，而是对原地址采用了一些加密方式。</p><p>而这个加密方式的点子，其实是在笔者数月前接触到ss/ssr的加密方式（也就是base系列的加密）时萌发出来的。而在真正开始加密的时候，笔者又寻思着直接用base32加密的特征太明显，很容易被解码，于是再将加密后字符串中的数字根据形状改为小写字母，因此便有了那段字符串与上文的解密过程。</p><p>不想让太多人找到这里，却还是发了空间，HibikiZer0真是个奇怪的人啊。（仰头）</p><p>差不多就先这样吧。</p>]]></content>
      
      
      <categories>
          
          <category> 胡言乱语 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HibikiZer0的第一篇博文</title>
      <link href="/2021/06/25/firstblog/"/>
      <url>/2021/06/25/firstblog/</url>
      
        <content type="html"><![CDATA[<p>总算把博客搭起来了。</p><p>就差不多先这样吧。</p><p>对于我这种没啥技术力可言的人来说，搭博客的目的主要就是记录自己的胡言乱语吧。</p><p>博客还在建设中，以后还请多指教。</p><p><del>Hibiki我婆。（唐突）</del></p>]]></content>
      
      
      <categories>
          
          <category> 随想 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
